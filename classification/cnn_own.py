# use GPU
# import plaidml.keras
# plaidml.keras.install_backend()

import os
import keras
import matplotlib.pyplot as plt
from cnn_datagenerator import get_train_gen
from keras.layers import Activation, Conv2D, Dense
from keras.layers import Dropout, Flatten, MaxPooling2D

### --- paths --- ###

BASE_PATH = '/'.join(os.getcwd().split('/')[:-1])
TRAIN_PATH = BASE_PATH + '/train_images/images_croped'
MODEL_JSON = './cnn_own.json'
MODEL_WEIGHTS = './cnn_own.hdf5'

### --- paths end --- ###

### --- parameters --- ###

img_width = 128
num_classes = 45
nb_train_samples = 180224

reg = 1e-3

epochs = 32
batch_size = 64
learning_rate = 1e-4

### --- parameters end --- ###

### --- define model --- ###

if os.path.isfile(MODEL_JSON) and os.path.isfile(MODEL_WEIGHTS):
    print('Load model from file')
    with open(MODEL_JSON, 'r') as file:
        json_string = file.readline()
    model = keras.models.model_from_json(json_string)
    model.load_weights(MODEL_WEIGHTS)
else:
    print('Build new model')
    model = keras.Sequential()

    # ConvLayer 1 - Input
    model.add(Conv2D(
        32, 3,
        # strides=(2, 2),
        padding='same',
        input_shape=(img_width, img_width, 3),
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))

    # ConvLayer 2
    model.add(Conv2D(
        32, 3,
        padding='same',
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    # ConvLayer 3
    model.add(Conv2D(
        64, 3,
        padding='same',
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))

    # ConvLayer 4
    model.add(Conv2D(
        64, 3,
        padding='same',
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    # ConvLayer 5
    model.add(Conv2D(
        128, 3,
        padding='same',
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))

    # ConvLayer 6
    model.add(Conv2D(
        128, 3,
        padding='same',
        kernel_regularizer=keras.regularizers.l2(reg)
    ))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))

    # Flat
    model.add(Flatten())

    # Fully Conected Layer 7
    model.add(Dense(2048, kernel_regularizer=keras.regularizers.l2(reg)))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))

    # Fully Conected Layer 8

    model.add(Dense(2048, kernel_regularizer=keras.regularizers.l2(reg)))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))

    # Fully Connected Layer 9 - Output
    model.add(Dense(num_classes, kernel_regularizer=keras.regularizers.l2(reg)))
    model.add(Activation('softmax'))

### --- end definition --- ###

### --- training --- ###

# initiate adam optimizer
opt = keras.optimizers.Adam(lr=learning_rate)

model.compile(
    optimizer=opt,
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

datagen = get_train_gen().flow_from_directory(
    directory=TRAIN_PATH,
    target_size=(img_width, img_width),
    color_mode="rgb",
    batch_size=batch_size,
    class_mode="categorical",
    shuffle=True
)

# Fit the model on the batches generated by datagen
history = model.fit_generator(
    generator=datagen,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    workers=2,
    verbose=1
)

### --- end training --- ###

### --- save model --- ###

model.summary()

json_string = model.to_json()
with open(MODEL_JSON, 'w') as file:
    file.write(json_string + '\n')
model.save_weights(MODEL_WEIGHTS)

### --- end save --- ###

### --- show learning --- ###

plt.style.use('ggplot')
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['acc'])
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.ylabel('loss')
plt.xlabel('epoch')

plt.savefig('./cnn_own_train.png')
plt.close()

### --- end show --- ###
